/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "../common";

export declare namespace DappLottery {
  export type LotteryStructStruct = {
    id: BigNumberish;
    title: string;
    description: string;
    image: string;
    prize: BigNumberish;
    ticketPrice: BigNumberish;
    participants: BigNumberish;
    drawn: boolean;
    owner: AddressLike;
    createdAt: BigNumberish;
    expiresAt: BigNumberish;
  };

  export type LotteryStructStructOutput = [
    id: bigint,
    title: string,
    description: string,
    image: string,
    prize: bigint,
    ticketPrice: bigint,
    participants: bigint,
    drawn: boolean,
    owner: string,
    createdAt: bigint,
    expiresAt: bigint
  ] & {
    id: bigint;
    title: string;
    description: string;
    image: string;
    prize: bigint;
    ticketPrice: bigint;
    participants: bigint;
    drawn: boolean;
    owner: string;
    createdAt: bigint;
    expiresAt: bigint;
  };

  export type ParticipantStructStruct = {
    account: AddressLike;
    lotteryNumber: string;
    paid: boolean;
  };

  export type ParticipantStructStructOutput = [
    account: string,
    lotteryNumber: string,
    paid: boolean
  ] & { account: string; lotteryNumber: string; paid: boolean };

  export type LotteryResultStructStruct = {
    id: BigNumberish;
    completed: boolean;
    paidout: boolean;
    timestamp: BigNumberish;
    sharePerWinner: BigNumberish;
    winners: DappLottery.ParticipantStructStruct[];
  };

  export type LotteryResultStructStructOutput = [
    id: bigint,
    completed: boolean,
    paidout: boolean,
    timestamp: bigint,
    sharePerWinner: bigint,
    winners: DappLottery.ParticipantStructStructOutput[]
  ] & {
    id: bigint;
    completed: boolean;
    paidout: boolean;
    timestamp: bigint;
    sharePerWinner: bigint;
    winners: DappLottery.ParticipantStructStructOutput[];
  };
}

export interface DappLotteryInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "buyTicket"
      | "createLottery"
      | "getLotteries"
      | "getLottery"
      | "getLotteryLuckyNumbers"
      | "getLotteryParticipants"
      | "getLotteryResult"
      | "importLuckyNumbers"
      | "randomlySelectWinners"
      | "serviceBalance"
      | "servicePercent"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "buyTicket",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "createLottery",
    values: [string, string, string, BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteries",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getLottery",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryLuckyNumbers",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryParticipants",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "getLotteryResult",
    values: [BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "importLuckyNumbers",
    values: [BigNumberish, string[]]
  ): string;
  encodeFunctionData(
    functionFragment: "randomlySelectWinners",
    values: [BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "serviceBalance",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "servicePercent",
    values?: undefined
  ): string;

  decodeFunctionResult(functionFragment: "buyTicket", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "createLottery",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteries",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getLottery", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryLuckyNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryParticipants",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getLotteryResult",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "importLuckyNumbers",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "randomlySelectWinners",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "serviceBalance",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "servicePercent",
    data: BytesLike
  ): Result;
}

export interface DappLottery extends BaseContract {
  connect(runner?: ContractRunner | null): DappLottery;
  waitForDeployment(): Promise<this>;

  interface: DappLotteryInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  buyTicket: TypedContractMethod<
    [id: BigNumberish, luckyNumberId: BigNumberish],
    [void],
    "payable"
  >;

  createLottery: TypedContractMethod<
    [
      title: string,
      description: string,
      image: string,
      prize: BigNumberish,
      ticketPrice: BigNumberish,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getLotteries: TypedContractMethod<
    [],
    [DappLottery.LotteryStructStructOutput[]],
    "view"
  >;

  getLottery: TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.LotteryStructStructOutput],
    "view"
  >;

  getLotteryLuckyNumbers: TypedContractMethod<
    [id: BigNumberish],
    [string[]],
    "view"
  >;

  getLotteryParticipants: TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.ParticipantStructStructOutput[]],
    "view"
  >;

  getLotteryResult: TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.LotteryResultStructStructOutput],
    "view"
  >;

  importLuckyNumbers: TypedContractMethod<
    [id: BigNumberish, luckyNumbers: string[]],
    [void],
    "nonpayable"
  >;

  randomlySelectWinners: TypedContractMethod<
    [id: BigNumberish, numOfWinners: BigNumberish],
    [void],
    "nonpayable"
  >;

  serviceBalance: TypedContractMethod<[], [bigint], "view">;

  servicePercent: TypedContractMethod<[], [bigint], "view">;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "buyTicket"
  ): TypedContractMethod<
    [id: BigNumberish, luckyNumberId: BigNumberish],
    [void],
    "payable"
  >;
  getFunction(
    nameOrSignature: "createLottery"
  ): TypedContractMethod<
    [
      title: string,
      description: string,
      image: string,
      prize: BigNumberish,
      ticketPrice: BigNumberish,
      expiresAt: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getLotteries"
  ): TypedContractMethod<[], [DappLottery.LotteryStructStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getLottery"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.LotteryStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotteryLuckyNumbers"
  ): TypedContractMethod<[id: BigNumberish], [string[]], "view">;
  getFunction(
    nameOrSignature: "getLotteryParticipants"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.ParticipantStructStructOutput[]],
    "view"
  >;
  getFunction(
    nameOrSignature: "getLotteryResult"
  ): TypedContractMethod<
    [id: BigNumberish],
    [DappLottery.LotteryResultStructStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "importLuckyNumbers"
  ): TypedContractMethod<
    [id: BigNumberish, luckyNumbers: string[]],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "randomlySelectWinners"
  ): TypedContractMethod<
    [id: BigNumberish, numOfWinners: BigNumberish],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "serviceBalance"
  ): TypedContractMethod<[], [bigint], "view">;
  getFunction(
    nameOrSignature: "servicePercent"
  ): TypedContractMethod<[], [bigint], "view">;

  filters: {};
}
